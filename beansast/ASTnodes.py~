
class ASTNode: pass

class FunctionCallNode(ASTNode):
    def __init__(self, name, expressions):
        self.name = name
        self.expressions = expressions
    def __repr__(self):
        return "FunctionCallNode(%s, %s)" % (self.name, self.expressions)

class VariableNode(ASTNode):
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        return "VariableNode(%s)" % self.name

class StringNode(ASTNode):
    def __init__(self, value):
        self.value = value
    def __repr__(self):
        return "StringNode(%s)" % self.value

class AssignmentNode(ASTNode):
    def __init__(self, name, value):
        self.name = name
        self.value = value
    def __repr__(self):
        return "AssignementNode(%s, %s)" % (self.name, self.value)

class FunctionDefinitionNode(ASTNode):
    def __init__(self, name, args, commands):
        self.name = name
        self.args = args
        self.commands = commands
    def __repr__(self):
        return "FunctionDefinitionNode(%s, %s, %s)" % (self.name, self.args, self.commands)

class MethodDefinitionNode(ASTNode):
    def __init__(self, name, args, commands):
        self.name = name
        self.args = args
        self.commands = commands
    def __repr__(self):
        return "MethodDefinitionNode(%s, %s, %s)" % (self.name, self.args, self.commands)

class ClassDefinitionNode(ASTNode):
    def __init__(self, name, parents, args, methods):
        self.name = name
        self.parents = parents
        self.args = args
        self.methods = methods
    def __repr__(self):
        return "ClassDefinitionNode(%s, %s, %s, %s)" % (self.name, self.parents, self.args, self.methods)

