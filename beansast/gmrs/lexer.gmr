IF ::= if
ELSE ::= else
ELIF ::= elif
WHILE ::= while
FOR ::= for
FUNCTION ::= function
CLASS ::= class
METHOD ::= method
MODULE ::= module
FROM ::= from
IMPORT ::= import
DATA ::= data
SPACENAME ::= spacename
PACKAGE ::= package
PUBLIC ::= public
PRIVATE ::= private
RETURN ::= return

EOF ::= \Z
STRING ::= ("|')(?P<value>(((?!(\\|\1)).)|(\\(?!\\).)|(\\\\))*)\1
FLOAT ::= (?P<value>(\d*\.\d+)|(\d+\.\d*))
INT ::= (?P<value>\d+)
ignore SPACE ::= [\t ]+
ignore EOL ::= \n
TRUE ::= true
FALSE ::= false

DOT ::= [.]

LPAR ::= \(
RPAR ::= \)
LBRACE ::= {
RBRACE ::= }
LBRACKET ::= \[
RBRACKET ::= ]
LBRACEU ::= {\|
RBRACEU ::= \|}
LBRACKETU ::= \[\|
RBRACKETU ::= \|]

HAS ::= has
IN ::= in
IS ::= is

AND ::= and
OR ::= or
XOR ::= xor
NOT ::= not

RSHIFT ::= >>
LSHIFT ::= <<
DPLUS ::= \+\+
PLUS ::= \+
DMINUS ::= --
MINUS ::= -
SQRT ::= \*/
LOG ::= /\*
DASTERISK ::= \*\*
ASTERISK ::= \*
DSLASH ::= //
SLASH ::= /
PERCENTAGE ::= %
LINE ::= \|
AMPERSAND ::= &
CIRCUMFLEX ::= \^

EQ ::= ==
GE ::= >=
LE ::= <=
GT ::= >
LT ::= <
NE ::= !=

EQUALS ::= =

COLON ::= :
GRAVE ::= `
DGRAVE ::= ``
SEMICOLON ::= ;
COMMA ::= ,
TILDE ::= ~
EXCLAMATION ::= !
QUESTION ::= \?

ID ::= (?P<name>\w*[a-zA-Z_]\w*)
