
primitives = {
    "SPACE": { 
        "code": 0,
        "name": "SPECIAL_SEP",
        "repr": " "
    },
    "TABULATION": {
        "code": 1,
        "name": "SPECIAL_TAB",
        "repr": "\t"
    },
    "EOL": {
        "code": 2,
        "name": "SPECIAL_EOL",
        "repr": "\n"
    },
    "INT": {
        "code": 3,
        "name": "TYPE_INT",
        "repr": "<integer>"
    },
    "FLOAT": {
        "code": 4,
        "name": "TYPE_FLOAT",
        "repr": "<float>"
    },
    "STRING": {
        "code": 5,
        "name": "TYPE_STRING",
        "repr": "<string>"
    },
    "CHARACTER": {
        "code": 6,
        "name": "TYPE_CHARACTER",
        "repr": "<character>"
    },
    "VARIABLE": {
        "code": 7,
        "name": "SPECIAL_VARIABLE",
        "repr": "<variable>"
    },
    "DOT": {
        "code": 8,
        "name": "SPECIAL_DOT",
        "repr": "."
    },
    "LPAR": {
        "code": 9,
        "name": "EXPRESSION_OPEN_PARENTHESE",
        "repr": "("
    },
    "RPAR": {
        "code": 10,
        "name": "EXPRESSION_CLOSE_PARENTHESE",
        "repr": ")"
    },
    "LBRACE": {
        "code": 11,
        "name": "STATEMENT_OPEN_BRACE",
        "repr": "{"
    },
    "RBRACE": {
        "code": 12,
        "name": "STATEMENT_CLOSE_BRACE",
        "repr": "}"
    },
    "LBRACKET": {
        "code": 13,
        "name": "TYPE_OPEN_BRACKET",
        "repr": "["
    },
    "RBRACKET": {
        "code": 14,
        "name": "TYPE_CLOSE_BRACKET",
        "repr": "]"
    },
    "EQUALS": {
        "code": 15,
        "name": "OPERATOR_EQUALS",
        "repr": "="
    },
    "PLUS": {
        "code": 16,
        "name": "OPERATOR_PLUS",
        "repr": "+"
    },
    "MINUS": {
        "code": 17,
        "name": "OPERATOR_MINUS",
        "repr": "-"
    },
    "ASTERISK": {
        "code": 18,
        "name": "OPERATOR_ASTERISK",
        "repr": "*"
    },
    "SLASH": {
        "code": 19,
        "name": "OPERATOR_SLASH",
        "repr": "/"
    },
    "AND": {
        "code": 20,
        "name": "OPERATOR_AND",
        "repr": "and"
    },
    "OR": {
        "code": 21,
        "name": "OPERATOR_OR",
        "repr": "or"
    },
    "NOT": {
        "code": 22,
        "name": "OPERATOR_NOT",
        "repr": "not"
    },
    "DOUBLE_EQUALS": {
        "code": 23,
        "name": "TEST_EGUAL",
        "repr": "=="
    },
    "MORE_OR_EQUAL": {
        "code": 24,
        "name": "TEST_MORE_OR_EQUAL",
        "repr": ">="
    },
    "LESS_OR_EQUAL": {
        "code": 25,
        "name": "TEST_LESS_OR_EGUAL",
        "repr": "<="
    },
    "MORE": {
        "code": 26,
        "name": "TEST_MORE",
        "repr": ">"
    },
    "LESS": {
        "code": 27,
        "name": "TEST_LESS",
        "repr": "<"
    },
    "NOT_EQUAL": {
        "code": 28,
        "name": "TEST_NOT_EQUAL",
        "repr": "!="
    },
    "IF": {
        "code": 29,
        "name": "STATEMENT_IF",
        "repr": "if"
    },
    "ELSE": {
        "code": 30,
        "name": "STATEMENT_ELSE",
        "repr": "else"
    },
    "ELIF": {
        "code": 31,
        "name": "STATEMENT_ELIF",
        "repr": "elif"
    },
    "WHILE": {
        "code": 32,
        "name": "STATEMENT_WHILE",
        "repr": "while"
    },
    "FOR": {
        "code": 33,
        "name": "STATEMENT_FOR",
        "repr": "for"
    },
    "FUNCTION": {
        "code": 34,
        "name": "STATEMENT_FUNCTION",
        "repr": "function"
    },
    "CLASS": {
        "code": 35,
        "name": "STATEMENT_CLASS",
        "repr": "class"
    },
    "METHOD": {
        "code": 36,
        "name": "STATEMENT_METHOD",
        "repr": "method"
    },
    "MODULE": {
        "code": 37,
        "name": "STATEMENT_MODULE",
        "repr": "module"
    },
    "FROM": {
        "code": 38,
        "name": "STATEMENT_FROM",
        "repr": "from"
    },
    "IMPORT": {
        "code": 39,
        "name": "STATEMENT_IMPORT",
        "repr": "import"
    },
    "DATA": {
        "code": 40,
        "name": "STATEMENT_DATA",
        "repr": "data"
    },
    "SPACENAME": {
        "code": 41,
        "name": "STATEMENT_SPACENAME",
        "repr": "spacename"
    },
    "PACKAGE": {
        "code": 42,
        "name": "STATEMENT_PACKAGE",
        "repr": "package"
    },
    "COLON": {
        "code": 43,
        "name": "STATEMENT_SEP",
        "repr": ":"
    },
    "PUBLIC": {
        "code": 44,
        "name": "STATEMENT_PUBLIC",
        "repr": "public"
    },
    "PRIVATE": {
        "code": 45,
        "name": "STATEMENT_PRIVATE",
        "repr": "private"
    },
    "GRAVE": {
        "code": 46,
        "name": "SPECIAL_GRAVE",
        "repr": "`"
    },
    "DOUBLE_GRAVE": {
        "code": 47,
        "name": "SPECIAL_DOUBLE_GRAVE",
        "repr": "``"
    },
    "SEMICOLON": {
        "code": 48,
        "name": "SPECIAL_SEMICOLON",
        "repr": ";"
    },
    "COMMA": {
        "code": 49,
        "name": "SPECIAL_COMMA",
        "repr": ","
    },
    "EOF": {
        "code": 50,
        "name": "SPECIAL_EOF",
        "repr": "<EOF>"
    }
}
